<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	<description>Spring公共配置 </description>
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.xwinter.study.activiti">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<context:property-placeholder
		ignore-resource-not-found="true" location="classpath*:spring/application.properties" />
	<!-- dataSource definition -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<!--定义SessionFactory 并定义相关实体 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>com.xwinter.study.activiti.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 一个Hibernate Dialect类名允许Hibernate针对特定的关系数据库生成优化的SQL. 取值 full.classname.of.Dialect -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 输出所有SQL语句到控制台. eg. true | false -->
				<!-- 有一个另外的选择是把org.hibernate.SQL这个log category设为debug。 -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 在SessionFactory创建时，自动检查数据库结构，或者将数据库schema的DDL导出到数据库. -->
				<!-- 使用 create-drop时,在显式关闭SessionFactory时，将drop掉数据库schema. -->
				<!-- 取值 validate | update | create | create-drop -->
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<!-- 在log和console中打印出更漂亮的SQL。 取值 true | false -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 将Hibernate查询中的符号映射到SQL查询中的符号 (符号可能是函数名或常量名字). -->
				<!-- 取值 hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC -->
				<!--<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop> -->
				<!-- 为Hibernate关联的批量抓取设置默认数量. 取值 建议的取值为4, 8, 和16 -->
				<!-- <prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop> -->
				<!-- 查看一下二级缓存中存放的数据条数，查询时错过的数据条数，缓存命中率等信息 <prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop> -->
				<!--<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop> -->
				<!-- 能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存. 取值 true|false -->
				<!--<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop> -->
				<!-- 允许查询缓存, 个别查询仍然需要被设置为可缓存的. 取值 true|false -->
				<!-- <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop> -->
				<!--<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> -->
				<!--<prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop> -->
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存.取值true|false -->
				<!-- <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop> -->
				<!-- <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop> -->
			</props>
		</property>
	</bean>
	<!-- 配置transactionManager, 注意这里引入的包的不同 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
	<!-- 开启注解事务 只对当前配置文件有效 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="in*" propagation="REQUIRED" />
			<tx:method name="claim*" propagation="REQUIRED" />
			<tx:method name="complete*" propagation="REQUIRED" />
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到 -->
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="start*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<aop:pointcut id="txPointcut"
			expression="execution(* com.xwinter.study.activiti.service.impl..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

</beans>